{{$moduleName := opts.PackageName | ucFirst -}}
// APIError represents errors that can occur during API calls
type APIError {
  HttpError(Http.ErrorResponse),
  JsonParseError,
  DecodeError(Object.Error)
}

// {{ $moduleName }} provides HTTP client methods for the API
module {{ $moduleName }} {
  // The base URL of the API server
  const BASE_URL : String = "{{getFirstServerURL}}"

{{range . -}}
{{$opid := .OperationId -}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$responseType := "String" -}}
{{- range .Responses}}{{if eq .StatusCode "200"}}{{if .Contents}}{{range .Contents}}{{$responseType = goTypeToMintType .Schema.TypeDecl}}{{break}}{{end}}{{end}}{{end}}{{end -}}
{{$bodyType := "" -}}
{{- range .Bodies}}{{if .Default}}{{$bodyType = goTypeToMintType .Schema.TypeDecl}}{{break}}{{end}}{{end -}}
  // {{$opid}}{{if .HasBody}} with body{{end}}
  fun {{$opid | lcFirst}}({{if $pathParams}}{{range $i, $param := $pathParams}}{{if $i}}, {{end}}{{$param.ParamName | camelCase | lcFirst}} : {{goTypeToMintType $param.Schema.TypeDecl}}{{end}}{{end}}{{if $hasParams}}{{if $pathParams}}, {{end}}params : {{$opid}}Params{{end}}{{if .HasBody}}{{if or $pathParams $hasParams}}, {{end}}body : {{$bodyType}}{{end}}) : Promise(Result(APIError, {{$responseType}})) {
    {{- if .QueryParams}}
    let queryParams =
      SearchParams.empty()
      {{- range $param := .QueryParams}}
      {{- $mintType := goTypeToMintType $param.Schema.TypeDecl}}
      {{- $fieldName := $param.ParamName | camelCase | lcFirst}}
      {{if $param.Required}}
      |> SearchParams.set("{{$param.ParamName}}", {{mintToStringExpr $mintType (printf "params.%s" $fieldName)}})
      {{- else}}
      |> (\(sp : SearchParams) {
        case params.{{$fieldName}} {
          Maybe.Just(value) =>
            SearchParams.set("{{$param.ParamName}}", {{mintToStringExpr $mintType "value"}}, sp)
          
          Maybe.Nothing =>
            sp
        }
      })
      {{- end}}
      {{- end}}

    let queryString =
      SearchParams.toString(queryParams)
      |> (\(qs : String) {
        if String.isEmpty(qs) {
          ""
        } else {
          "?" + qs
        }
      })
    {{- end}}

    let url =
      "#{BASE_URL}{{mintPathWithParams .Path .PathParams}}"{{if .QueryParams}} + queryString{{end}}

    let request =
      {{if eq (.Method | lower) "get"}}Http.get(url){{else if eq (.Method | lower) "post"}}Http.post(url){{if .HasBody}}
      |> Http.jsonBody(encode body){{end}}{{else if eq (.Method | lower) "put"}}Http.put(url){{if .HasBody}}
      |> Http.jsonBody(encode body){{end}}{{else if eq (.Method | lower) "delete"}}Http.delete(url){{else if eq (.Method | lower) "patch"}}Http.patch(url){{if .HasBody}}
      |> Http.jsonBody(encode body){{end}}{{else}}Http.get(url){{end}}
      {{- range .HeaderParams}}
      {{- $mintType := goTypeToMintType .Schema.TypeDecl}}
      {{- $fieldName := .ParamName | camelCase | lcFirst}}
      {{- if .Required}}
      |> Http.header("{{.ParamName}}", {{mintToStringExpr $mintType (printf "params.%s" $fieldName)}})
      {{- end}}
      {{- end}}
{{- range .HeaderParams}}
{{- if not .Required}}
{{- $mintType := goTypeToMintType .Schema.TypeDecl}}
{{- $fieldName := .ParamName | camelCase | lcFirst}}

    let request =
      case params.{{$fieldName}} {
        Maybe.Just(value) =>
          request |> Http.header("{{.ParamName}}", {{mintToStringExpr $mintType "value"}})
        
        Maybe.Nothing =>
          request
      }
{{- end}}
{{- end}}

    let Ok(httpResponse) =
      await Http.send(request) or return Result.Err(
        APIError.HttpError({
          headers: Map.empty(),
          type: Http.Error.NetworkError,
          status: 0,
          url: url
        }))

    let JSON(object) =
      httpResponse.body or return Result.Err(APIError.JsonParseError)

    decode object as {{$responseType}}
    |> Result.mapError((error : Object.Error) : APIError {
      APIError.DecodeError(error)
    })
  }

{{end}}
}
